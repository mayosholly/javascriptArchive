Objects in Javascript
Objects, in JavaScript, are the most important data type and form the building blocks for modern JavaScript. These objects are quite different from JavaScript’s primitive data types (Number, String, Boolean, null, undefined, and symbol) in the sense that these primitive data types all store a single value each (depending on their types).

Syntax:
new Object(value)
Object(value)
let object_name = {
    key_name : value,
    ...
}
Note:- Object()  can be called with or without new. Both create a new object.

Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.
An object can be created with figure brackets {…} with an optional list of properties. A property is a “key: value” pair, where a key is a string (also called a “property name”), and the value can be anything.

JavaScript Object Properties
The property names can be strings or numbers. In case the property names are numbers, they must be accessed using the “bracket notation” like this.

Inherited Properties
Inherited properties of an object are those properties that have been inherited from the object’s prototype, as opposed to being defined for the object itself, which is known as the object’s Own property. To verify if a property is an object’s Own property, we can use the hasOwnProperty method. Property Attributes Data properties in JavaScript have four attributes.

value: The property’s value.
writable: When true, the property’s value can be changed
enumerable: When true, the property can be iterated over by “for-in” enumeration. Otherwise, the property is said to be non-enumerable.
configurable: If false, attempts to delete the property, change the property to be an access-or property, or change its attributes (other than [[Value]], or changing [[Writable]] to false) will fail.

Accessing Object Members
Object members(properties or methods) can be accessed using the dot notation

(objectName.memberName);


Bracket Notation
Syntax:
 objectName["memberName"]


 Iterating over all keys of an object
To iterate over all existing enumerable keys of an object, we may use the for…in construct. It is worth noting that this allows us to access only those properties of an object which are enumerable (Recall that enumerable is one of the four attributes of data properties). For instance, properties inherited from the Object.prototype are not enumerable. But, enumerable properties inherited from somewhere can also be accessed using the for…in construct

Deleting Properties
To Delete a property of an object we can make use of the delete operator. An example of its usage has been listed below.

